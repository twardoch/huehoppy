#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["cmake", "colortrans", "colortransferlib", "Cython", "dlib", "facexlib", "fuzzy-c-means", "gdown", "h5py", "imblearn", "jax", "jaxutils", "linear_attention_transformer", "llvmlite", "lpips", "matplotlib", "ml_dtypes", "numba", "numpy", "oct2py", "open3d", "opencv-python", "phasepack", "PilloW", "pyamg", "pyfftw", "pyhull", "pyiqa", "pyntcloud", "pysaliency", "python-color-transfer", "retry", "scikit-image", "scikit-learn", "scipy", "seaborn", "setuptools", "tf_slim", "torch", "torch-optimizer", "torchfile", "torchmetrics", "torchvision", "tqdm", "transformers", "typing-extensions", "vector-quantize-pytorch", "zipfile36"]
# ///
# this_file: /Users/adam/Developer/vcs/github.twardoch/pub/huehoppy/work/imagecolortransfer

# uv pip install --system pyiqa facexlib numba llvmlite numpy && uv pip install --system --upgrade --prerelease allow torchvision torch transformers jax jaxutils ml_dtypes numpy opencv-python  cmake Cython dlib fuzzy-c-means gdown h5py imblearn linear_attention_transformer lpips matplotlib numpy numba oct2py open3d PilloW phasepack pyamg pyfftw pyhull pyiqa pyntcloud pysaliency retry scikit-image scikit-learn scipy seaborn setuptools tensorflow tensorflow-probability tf_slim torch torchfile torchmetrics torchvision torch-optimizer tqdm typing-extensions vector-quantize-pytorch zipfile36 numpy
# uv pip install --system colortransferlib colortrans python-color-transfer

import os
import tempfile
import time
from itertools import chain
from pathlib import Path
from typing import Any, Literal

import cv2
import numpy as np

# other
from fire import Fire
from loguru import logger
from pathos.helpers import mp
from pathos.pools import ProcessPool, ThreadPool
from PIL import Image as PIL_Image
from rich.logging import RichHandler


class pathos_with:
    """
    Context manager for Pathos parallel processing pools.

    Handles creation and cleanup of Pathos pools with proper resource management.
    Automatically determines optimal number of processes based on CPU count.

    Args:
        pool_class: The Pathos pool class to use (default: ProcessPool)
        nodes: Number of processes to use. If None, uses CPU count (default: None)

    Example:
        >>> with pathos_with() as pool:
        ...     results = pool.map(lambda x: x*2, range(100))
        >>> print(results[:5])
        [0, 2, 4, 6, 8]
    """

    def __init__(self, pool_class: type = ThreadPool, nodes: int | None = None):
        if not issubclass(pool_class, (ProcessPool, ThreadPool)):
            raise TypeError("pool_class must be ProcessPool or ThreadPool")
        self.pool_class = pool_class
        self.nodes = nodes if nodes is not None else mp.cpu_count()
        self.pool: ProcessPool | None = None

    def __enter__(self) -> ProcessPool:
        self.pool = self.pool_class(nodes=self.nodes)
        return self.pool

    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> Literal[False]:
        if self.pool:
            try:
                self.pool.close()
                self.pool.join()
                self.pool.clear()
            except TimeoutError:
                logger.warning("Pool cleanup timed out")
        return False


def get_out_dir(out_base: Path, ref_path: Path) -> Path:
    """
    Create and return output directory based on reference path.

    Args:
        out_base: Base output directory path
        ref_path: Reference image path

    Returns:
        Path to created output directory

    Raises:
        PermissionError: If directory cannot be created
    """
    try:
        out_dir = out_base / f"{ref_path.stem}"
        out_dir.mkdir(parents=True, exist_ok=True)
        return out_dir
    except PermissionError as e:
        logger.error(f"Permission denied creating directory: {e}")
        raise


# Configure logging via Loguru + Rich
logger.remove()
logger.add(
    RichHandler(rich_tracebacks=True, markup=True),
    format="{message}",
    level="INFO",
)


def transfer_colors_ct(
    src_paths: list[Path],
    ref_path: Path,
    out_base: Path,
    all_methods: bool = False,
) -> list[Path]:
    try:
        from colortrans import transfer_lhm, transfer_reinhard

        result_paths: list[Path] = []
        logger.info("Applying CT...")

        def apply_ct_to_image(
            src_path: Path, ref_rgb: np.ndarray, out_dir: Path
        ) -> list[Path]:
            """
            Apply colortrans algorithms and save the results.
            """

            base_name = src_path.stem
            out_paths: list[Path] = []
            with PIL_Image.open(src_path) as src_image:
                src_rgb = np.array(src_image.convert("RGB"))

            # LHM transfer
            logger.info("Applying CT LHM...")
            start_time = time.time()
            try:
                lhm_result = transfer_lhm(src_rgb, ref_rgb)
                out_path = out_dir / f"{base_name}-ct_lhm.jpg"
                PIL_Image.fromarray(lhm_result).save(str(out_path))
                out_paths.append(out_path)
                logger.info(
                    f"{out_path.name} ← CT LHM | {time.time() - start_time:.2f}s"
                )
            except Exception as e:
                logger.error(f"Error applying CT LHM: {e}")

            # Reinhard transfer
            logger.info("Applying CT Reinhard...")
            start_time = time.time()
            try:
                reinhard_result = transfer_reinhard(src_rgb, ref_rgb)
                out_path = out_dir / f"{base_name}-ct_rh.jpg"
                PIL_Image.fromarray(reinhard_result).save(str(out_path))
                out_paths.append(out_path)
                logger.info(
                    f"{out_path.name} ← CT Reinhard | {time.time() - start_time:.2f}s"
                )
            except Exception as e:
                logger.error(f"Error applying CT Reinhard: {e}")

            return out_paths

        def apply_ct_to_images(
            src_paths: list[Path], ref_path: Path, out_dir: Path
        ) -> list[Path]:
            with PIL_Image.open(ref_path) as ref_image:
                ref_rgb: np.ndarray = np.array(ref_image.convert("RGB"))

            with pathos_with() as pool:
                results = pool.map(
                    lambda src: apply_ct_to_image(src, ref_rgb, out_dir), src_paths
                )
            return [Path(p) for p in chain.from_iterable(results) if p and p.is_file()]

        start_time = time.time()
        result_paths.extend(
            apply_ct_to_images(src_paths, ref_path, get_out_dir(out_base, ref_path))
        )
        logger.info(f"CT complete | {time.time() - start_time:.2f}s")

        is_ct = True
        return result_paths
    except ImportError:
        is_ct = False

    return []


def transfer_colors_pct(
    src_paths: list[Path],
    ref_path: Path,
    out_base: Path,
    all_methods: bool = False,
) -> list[Path]:
    try:
        from python_color_transfer.color_transfer import ColorTransfer as PCT_CT

        result_paths: list[Path] = []
        logger.info("Applying PCT...")

        def apply_pct_to_image(
            src_path: Path, ref_array: np.ndarray, out_dir: Path
        ) -> list[Path]:
            """
            Apply python_color_transfer algorithms and save the results.
            """

            base_name = src_path.stem
            out_paths: list[Path] = []
            src_array = cv2.imread(str(src_path))  # type: ignore

            py_transfer = PCT_CT()

            # Mean/Std transfer
            logger.info("Applying PCT Mean/Std...")
            start_time = time.time()
            try:
                mean_std_result = py_transfer.mean_std_transfer(
                    img_arr_in=src_array, img_arr_ref=ref_array
                )
                out_path = out_dir / f"{base_name}-pct_mt.jpg"
                cv2.imwrite(str(out_path), mean_std_result)  # type: ignore
                out_paths.append(out_path)
                logger.info(
                    f"{out_path.name} ← PCT Mean/Std | {time.time() - start_time:.2f}s"
                )
            except Exception as e:
                logger.error(f"Error applying PCT Mean/Std: {e}")

            # Lab mean transfer
            logger.info("Applying PCT Lab Mean...")
            start_time = time.time()
            try:
                lab_mean_result = py_transfer.lab_transfer(
                    img_arr_in=src_array, img_arr_ref=ref_array
                )
                out_path = out_dir / f"{base_name}-pct_lt.jpg"
                cv2.imwrite(str(out_path), lab_mean_result)  # type: ignore
                out_paths.append(out_path)
                logger.info(
                    f"{out_path.name} ← PCT Lab Mean | {time.time() - start_time:.2f}s"
                )
            except Exception as e:  # pylint: disable=broad-except
                logger.error(f"Error applying PCT Lab Mean: {e}")

            # PDF transfer with regrain
            logger.info("Applying PCT PDF Regrain...")
            start_time = time.time()
            try:
                pdf_regrain = py_transfer.pdf_transfer(
                    img_arr_in=src_array, img_arr_ref=ref_array, regrain=True
                )
                out_path = out_dir / f"{base_name}-pct_pdfr.jpg"
                cv2.imwrite(str(out_path), pdf_regrain)  # type: ignore
                out_paths.append(out_path)
                logger.info(
                    f"{out_path.name} ← PCT PDF Regrain | {time.time() - start_time:.2f}s"
                )
            except Exception as e:  # pylint: disable=broad-except
                logger.error(f"Error applying PCT PDF Regrain: {e}")

            return out_paths

        def apply_pct_to_images(
            src_paths: list[Path], ref_path: Path, out_dir: Path
        ) -> list[Path]:
            ref_array: np.ndarray = cv2.imread(str(ref_path))  # type: ignore

            with pathos_with() as pool:
                results = pool.map(
                    lambda src: apply_pct_to_image(src, ref_array, out_dir), src_paths
                )
            return [Path(p) for p in chain.from_iterable(results) if p and p.is_file()]

        start_time = time.time()
        result_paths.extend(
            apply_pct_to_images(src_paths, ref_path, get_out_dir(out_base, ref_path))
        )
        logger.info(f"PCT complete | {time.time() - start_time:.2f}s")

        is_pct = True
        return result_paths
    except ImportError:
        is_pct = False

    return []


def transfer_colors_ctl(
    src_paths: list[Path],
    ref_path: Path,
    out_base: Path,
    all_methods: bool = False,
) -> list[Path]:
    try:
        from ColorTransferLib.ColorTransfer import ColorTransfer as CTL_CT
        from ColorTransferLib.ColorTransfer import available_methods as CTL_METHODS
        from ColorTransferLib.ImageProcessing.Image import Image as CTL_Image
        from ColorTransferLib.Options import __file__ as CTL_OPTIONS_FILE

        result_paths: list[Path] = []
        logger.info("Applying CTL...")

        CTL_PKG_DIR = Path(CTL_OPTIONS_FILE).parent.parent
        os.chdir(CTL_PKG_DIR)

        def apply_ctl_to_image(
            src_image: CTL_Image,
            ref_image: CTL_Image,
            algorithm: str,
            out_dir: Path,
            base_name: str,
        ) -> Path | None:
            """
            Apply a single ColorTransferLib algorithm and save the result.

            Args:
                src: Source image
                ref: Reference image
                algorithm: Algorithm name to apply
                out_base: Output directory
                base_name: Base name for output file
            Returns:
                Path to output file if successful, None if failed
            """
            logger.info(f"Applying CTL {algorithm}...")
            start_time = time.time()
            try:
                transfer = CTL_CT(src_image, ref_image, algorithm)
                result: dict[str, Any] = transfer.apply()

                if result["status_code"] == 0:
                    out_path = out_dir / f"{base_name}-ctl_{algorithm.lower()}.jpg"
                    temp_path_prefix = str(tempfile.mktemp(suffix=""))
                    temp_path = Path(f"{temp_path_prefix}.png")
                    result["object"].write(temp_path_prefix)
                    PIL_Image.open(temp_path).convert("RGB").save(out_path, "JPEG")
                    if temp_path.exists():
                        temp_path.unlink()
                    logger.info(
                        f"{out_path.name} ← CTL {algorithm} | {time.time() - start_time:.2f}s"
                    )
                    return out_path
                else:
                    logger.warning(f"Error with {algorithm}: {result['response']}")
                    return None
            except Exception as e:  # pylint: disable=broad-except
                logger.error(f"Error applying CTL {algorithm}: {e}")
                return None

        def apply_ALL_ctl_to_image(
            src_path: Path, ref_image, out_dir: Path
        ) -> list[Path]:
            """
            Apply the original ColorTransferLib algorithms and save the results.
            """
            CTL_EXCLUDE = {
                "BCC",
                "CAM",
                "DPT",
                "EB3",
                "HIS",
                "NST",
                "PDF",
                "PSN",
                "RHG",
                "TPS",
                "VSI",
            }
            CTL_NOT_ALL = set() if all_methods else {"FUZ", "GPC"}
            algorithms = sorted(
                list(set(CTL_METHODS) - set(CTL_EXCLUDE) - set(CTL_NOT_ALL))
            )
            src_image = CTL_Image(file_path=str(src_path))
            base_name = src_path.stem
            # results = map(
            #    lambda algo: apply_ctl_to_image(
            #        src_image, ref_image, algo, out_base, base_name
            #    ),
            #    algorithms,
            # )
            with pathos_with() as pool:
                results = pool.map(
                    lambda algo: apply_ctl_to_image(
                        src_image, ref_image, algo, out_dir, base_name
                    ),
                    algorithms,
                )

            return list(Path(p) for p in results if p and p.is_file())

        def apply_ALL_ctl_to_images(
            src_paths: list[Path], ref_path: Path, out_dir: Path
        ) -> list[Path]:
            ref_image = CTL_Image(file_path=str(ref_path))

            results = []
            for src_path in src_paths:
                # Call the apply_ALL_ctl_to_image function directly
                sub_results = apply_ALL_ctl_to_image(src_path, ref_image, out_dir)
                results.append(sub_results)

            return list(
                Path(p) for p in chain.from_iterable(results) if p and p.is_file()
            )

        start_time = time.time()
        result_paths.extend(
            apply_ALL_ctl_to_images(
                src_paths, ref_path, get_out_dir(out_base, ref_path)
            )
        )
        logger.info(f"CTL complete | {time.time() - start_time:.2f}s")

        is_ctl = True
        return result_paths
    except ImportError:
        is_ctl = False

    return []


def transfer_colors_to_images(
    src_paths: list[Path],
    ref_path: Path,
    out_base: Path | None = None,
    all_methods: bool = False,
    verbose: bool = False,
) -> list[Path]:
    """
    Transfer colors from the reference image to the source image using multiple algorithms.

    Args:
        src_paths: List of source image paths
        ref_path: Reference image path
        out_base: Output directory (default: current working directory)
        verbose: If True, show INFO level logs, otherwise show WARNING level (default: False)
    """
    # Configure logging level based on verbose flag
    logger.remove()
    logger.add(
        RichHandler(rich_tracebacks=True, markup=True),
        format="{message}",
        level="INFO" if verbose else "WARNING",
    )
    ref_path = Path(ref_path).resolve()
    if not ref_path.exists():
        logger.error(f"Reference image not found: {ref_path}")
        return

    src_paths = [p.resolve() for p in src_paths if p.exists()]
    if not src_paths:
        logger.error("No valid source images found")
        return

    out_base = out_base.resolve() if out_base else Path.cwd().resolve()
    out_base.mkdir(parents=True, exist_ok=True)

    # Define all_methods algorithms to run
    logger.info(
        f"Transferring colors from {ref_path.name} to {len(src_paths)} images..."
    )

    results = map(
        lambda fn: fn(src_paths, ref_path, out_base, all_methods),
        [transfer_colors_ct, transfer_colors_pct, transfer_colors_ctl],
    )
    result_paths = list(
        Path(p) for p in chain.from_iterable(results) if p and p.is_file()
    )

    logger.info(f"Saved {len(list(result_paths))} results to {out_base}")
    return result_paths


def parse_paths(paths: tuple[str | Path] | list[str | Path] | str | Path) -> list[Path]:
    if isinstance(paths, (str, Path)):
        if isinstance(paths, str) and "," in paths:
            return [Path(s.strip()) for s in paths.split(",")]
        else:
            return [Path(paths)]
    else:
        return [Path(p) for p in paths]


def cli(
    *sources: str | Path,
    reference: tuple[str | Path] | list[str | Path] | str | Path,
    out_base: str | Path | None = None,
    all_methods: bool = False,
    verbose: bool = False,
) -> None:
    """
    Transfer colors from the reference image(s) to the source image(s) using multiple algorithms.

    This function serves as the command-line interface for the color transfer process. It takes
    source images and reference images as input, applies various color transfer algorithms, and
    saves the results to the specified output directory.
    Args:
        sources: Source image paths. Can be provided as multiple arguments or a comma-separated string.
        reference: Reference image path(s). Can be a single path, multiple paths, or a comma-separated string.
        out_base: Output directory for the processed images. If None, the current working directory is used.
        all_methods: If True, applies all available color transfer methods, including experimental ones.
        verbose: If True, displays detailed INFO level logs. If False, shows only WARNING level logs.

    Returns:
        None. The function processes the images and saves the results to the specified output directory.
    """
    src_paths: list[Path] = parse_paths(sources)
    ref_paths: list[Path] = parse_paths(reference)
    out_base_dir: Path | None = Path(out_base) if out_base else None
    results = [
        transfer_colors_to_images(
            src_paths=src_paths,
            ref_path=ref_path,
            out_base=out_base_dir,
            all_methods=all_methods,
            verbose=verbose,
        )
        for ref_path in ref_paths
    ]
    result_paths = list(
        Path(p) for p in chain.from_iterable(results) if p and p.is_file()
    )


if __name__ == "__main__":
    Fire(cli)
